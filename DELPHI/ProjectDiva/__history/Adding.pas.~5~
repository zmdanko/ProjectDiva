unit Adding;

interface

uses
  System.Messaging, System.Generics.Collections, System.SysUtils, System.Types,
  System.UITypes,
  System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Edit,
  FMX.Controls.Presentation, FMX.StdCtrls, REST.Types, REST.Client,
  Data.Bind.Components, Data.Bind.ObjectScope, FMX.Memo.Types, FMX.ScrollBox,
  FMX.Memo;

type
  TSaveSuccessMessage = class
    ParameterList: TDictionary<string, string>;
  public
    constructor Create();
  end;

  TAddingForm = class(TForm)
    Commit: TButton;
    RESTClient1: TRESTClient;
    RESTRequest1: TRESTRequest;
    RESTResponse1: TRESTResponse;
    procedure CommitClick(Sender: TObject);
  private
    function AddingParameterList(): TRESTRequestParameterList;
    { Private declarations }
  public
    constructor Create(AOwner: TComponent;
      const KeysList: TList<String>); overload;
  end;

var
  SaveSuccessMessage: TSaveSuccessMessage;

implementation

{$R *.fmx}

// adding parameters to RESTRequestParameterList
function TAddingForm.AddingParameterList(): TRESTRequestParameterList;

var
  RESTRequestParameterList: TRESTRequestParameterList;
  ComponentEnumerator: TComponentEnumerator;
begin
  SaveSuccessMessage := TSaveSuccessMessage.Create();

  RESTRequestParameterList := TRESTRequestParameterList.Create(self);

  // traverse the child components find those TEdit components
  ComponentEnumerator := self.GetEnumerator;

  while (ComponentEnumerator.MoveNext) do
  begin
    if (ComponentEnumerator.GetCurrent is TEdit) then
    begin
      RESTRequestParameterList.AddItem(ComponentEnumerator.GetCurrent.Name,
        TEdit(ComponentEnumerator.GetCurrent).Text);
      SaveSuccessMessage.ParameterList.Add(ComponentEnumerator.GetCurrent.Name,
        TEdit(ComponentEnumerator.GetCurrent).Text);
    end;
  end;

  result := RESTRequestParameterList;
end;

procedure TAddingForm.CommitClick(Sender: TObject);
begin
  // add RequestParameterList and execute request
  self.RESTRequest1.Params := AddingParameterList();
  self.RESTRequest1.Execute;

  if (RESTResponse1.StatusCode <> 201) then
  begin
    ShowMessage(RESTResponse1.Content);
    Exit;
  end;

  ShowMessage(RESTResponse1.Content);

  TMessageManager.DefaultManager.SendMessage(Sender,
    TMessage<TSaveSuccessMessage>.Create(SaveSuccessMessage), True);

  self.Destroy();
end;

// traverse the form fileds and show it in the form
constructor TAddingForm.Create(AOwner: TComponent;
  const KeysList: TList<String>);
var
  I: Integer;
  newLabel: TLabel;
  newEdit: TEdit;
begin
  inherited Create(AOwner);
  for I := 0 to KeysList.Count - 1 do
  begin
    // the id filed create in the server
    if (KeysList[I] <> 'id') then
    begin
      newLabel := TLabel.Create(self);
      newLabel.Text := KeysList[I];
      newLabel.Position := TPosition.Create
        (TPointF.Create(self.Width div 8, 30 * I));

      newEdit := TEdit.Create(self);
      newEdit.Name := KeysList[I];
      newEdit.Width := self.Width div 8 * 5;
      newEdit.Position := TPosition.Create
        (TPointF.Create(self.Width div 8 * 2, 30 * I));

      self.AddObject(newLabel);
      self.AddObject(newEdit);
    end;
  end;
  self.Commit.Position := TPosition.Create
    (TPointF.Create(self.Width div 8 * 2, 30 * I));

end;

{ TSaveSuccessMessage }

constructor TSaveSuccessMessage.Create();
begin
  self.ParameterList := TDictionary<string, string>.Create();
end;

end.
